import os
import mimetypes
import json
from datetime import datetime
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv

db: SQLAlchemy = SQLAlchemy()


DEFAULT_SETTINGS = {
    "model_name_or_path": "nlpaueb/legal-bert-base-uncased",
    "threshold": 0.6,
    "merge_window_chars": 80,
    "enable_gemini": False,
    "gemini_model": "gemini-2.0-flash",
    "risk_weights": {
        "Payment Terms": 1.0,
        "Liability & Exclusions": 1.5,
        "Termination": 1.2,
        "Intellectual Property": 1.3,
        "Confidentiality": 1.0
    },
    "upload_max_mb": 15,
    "disclaimer": "This analysis provides risk indicators only and is not legal advice.",
    "export_footer": "Generated by Contract Clause Risk Detection System",
    "logo_path": ""
}


def ensure_dirs(app: Flask):
    os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)
    os.makedirs(app.config["REPORT_FOLDER"], exist_ok=True)


def load_settings(settings_path: str) -> dict:
    if not os.path.exists(settings_path):
        with open(settings_path, "w", encoding="utf-8") as f:
            json.dump(DEFAULT_SETTINGS, f, indent=2)
        return DEFAULT_SETTINGS.copy()
    try:
        with open(settings_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            # backfill any missing keys
            changed = False
            for k, v in DEFAULT_SETTINGS.items():
                if k not in data:
                    data[k] = v
                    changed = True
            if changed:
                with open(settings_path, "w", encoding="utf-8") as wf:
                    json.dump(data, wf, indent=2)
            return data
    except Exception:
        return DEFAULT_SETTINGS.copy()


def create_app():
    load_dotenv()

    app = Flask(__name__, template_folder="templates", static_folder="static")

    # Serve .mjs as JavaScript for local ESM PDF.js
    try:
        mimetypes.add_type("application/javascript", ".mjs")
        mimetypes.add_type("text/javascript", ".mjs")
    except Exception:
        pass

    # Basic config
    app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY", "dev-secret-key")
    db_path = os.environ.get("DATABASE_PATH", os.path.join(os.getcwd(), "app.db"))
    app.config["SQLALCHEMY_DATABASE_URI"] = f"sqlite:///{db_path}"
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    app.config["UPLOAD_FOLDER"] = os.path.join(os.getcwd(), "uploads")
    app.config["REPORT_FOLDER"] = os.path.join(os.getcwd(), "reports")
    app.config["MAX_CONTENT_LENGTH"] = 20 * 1024 * 1024  # 20 MB hard cap
    app.config["DEBUG"] = True

    # Settings
    settings_path = os.path.join(os.getcwd(), "app", "settings.json")
    app.config["SETTINGS_PATH"] = settings_path
    app.config["SETTINGS"] = load_settings(settings_path)
    # Expose settings on the app for easy access across routes
    app.settings = app.config["SETTINGS"]

    ensure_dirs(app)

    db.init_app(app)

    with app.app_context():
        from . import models  # noqa: F401
        db.create_all()

    # Blueprints
    from .blueprints.main.routes import bp as main_bp
    from .blueprints.analyze.routes import bp as analyze_bp
    from .blueprints.history.routes import bp as history_bp
    from .blueprints.settings.routes import bp as settings_bp

    app.register_blueprint(main_bp)
    app.register_blueprint(analyze_bp, url_prefix="/analyze")
    app.register_blueprint(history_bp, url_prefix="/history")
    app.register_blueprint(settings_bp, url_prefix="/settings")

    @app.context_processor
    def inject_globals():
        return {
            "now": datetime.utcnow(),
            "settings": app.config.get("SETTINGS"),
        }

    return app
